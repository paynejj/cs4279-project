import DungeonNodeHTML from "./DungeonNodeHTML"
import { Dungeon } from "../Scripts/Dungeon"
import { useState } from "react"

interface DungeonMapProps {
    dungeon: Dungeon
}
function DungeonMap({ dungeon }: DungeonMapProps) {
    //enables re-rendering whenever the player moves. 
    const [player, setPlayer] = useState(dungeon.player)
    /**
     * Handles keyboard controls for Dungeon Map
     * @param e the event generated by the key press
     * @param dungeon the Dungeon object 
     */
    const handleKeyUp = (e, dungeon: Dungeon) => {
        //Key Codes
        const LEFT_ARROW = 37
        const UP_ARROW = 38
        const RIGHT_ARROW = 39
        const DOWN_ARROW = 40

        let pos = dungeon.player

        switch (e.keyCode) {
            //top-left is [0,0], bottom-right is [dungeon.rows, dungeon.cols]
            case UP_ARROW:
                pos = dungeon.move(pos[0] - 1, pos[1])
                break
            case DOWN_ARROW:
                pos = dungeon.move(pos[0] + 1, pos[1])
                break
            case LEFT_ARROW:
                pos = dungeon.move(pos[0], pos[1] - 1)
                break
            case RIGHT_ARROW:
                pos = dungeon.move(pos[0], pos[1] + 1)
                break
            default: {/**do nothing */ }
        }
        setPlayer(pos)
    }
    /**
     * Checks if the given index corresponds to the player coordinate in the dungeon
     * @param idx index of the DungeonNode from the flattened map
     * @returns true if idx matches player pos
     */
    const hasPlayer = (idx: number) => {
        //converting 1D idx to 2D idx
        const row = Math.floor(idx / dungeon.rows)
        const col = idx % dungeon.cols

        //check if coordinates match
        return (row === player[0] && col === player[1])
    }
    //Convert the Dungeon.map to html. 
    return (
        //tabindex required for key detection
        <div tabIndex={0} className="dungeon-map" onKeyUp={(e) => handleKeyUp(e, dungeon)} >
            {dungeon.map
                //flatten 2d array to 1d
                .flat()
                //create DungeonNode components for every internal dungeon node
                .map((node, idx) =>
                    <DungeonNodeHTML node={node} key={idx} hasPlayer={hasPlayer(idx)} />)}
        </div>
    )
}
export default DungeonMap