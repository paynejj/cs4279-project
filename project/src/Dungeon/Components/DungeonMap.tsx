import DungeonNodeDisplay from "./DungeonNodeDisplay"
import { Dungeon } from "../Scripts/Dungeon"
import { PlayerDataContext } from "../../Player/PlayerDataContext"
import { KeyboardEvent, useContext, useEffect, useRef, useState } from "react"
import React from "react"
import CDButton from "../../Components/CDButton"
import { Link } from "react-router-dom"
import { useQuests } from "../../Object/QuestData";

interface DungeonMapProps {
    dungeon: Dungeon
}
function DungeonMap({ dungeon }: DungeonMapProps) {
    let complete = useRef(dungeon.isComplete())
    const { playerData, setPlayerData } = useContext(PlayerDataContext)
    const { acceptedQuests, progressQuest } = useQuests(); // for quest progress
    let beginnerQuest = acceptedQuests.find((quest) => quest.name === "Beginner");
    let mrDungeonQuest = acceptedQuests.find((quest) => quest.name === "MrDungeon");
    useEffect(() => {
        complete.current = dungeon.isComplete()

        if (complete.current) {
            setPlayerData({ ...playerData, gold: (playerData.gold += dungeon.level.reward.gold) })
            if (beginnerQuest) {
                progressQuest(beginnerQuest);
            }
            if (mrDungeonQuest) {
                progressQuest(mrDungeonQuest);
            }
        }
    })
    //
    /**enables re-render when player playerition changes */
    const [player, setPlayer] = useState(dungeon.player)
    /**
     * Handles keyboard controls for Dungeon Map
     * @param e the event generated by the key press
     * @param dungeon the Dungeon object 
     */
    const handleKeyDown = (e: KeyboardEvent, dungeon: Dungeon) => {

        switch (e.key) {
            //top-left is [0,0], bottom-right is [dungeon.rows, dungeon.cols]
            case "ArrowUp":
                setPlayer(dungeon.move(player[0] - 1, player[1]))
                break
            case "ArrowDown":
                setPlayer(dungeon.move(player[0] + 1, player[1]))
                break
            case "ArrowLeft":
                setPlayer(dungeon.move(player[0], player[1] - 1))
                break
            case "ArrowRight":
                setPlayer(dungeon.move(player[0], player[1] + 1))
                break
            default: {/**do nothing */ }
        }
    }
    /**
     * Checks if the given index corresponds to the player coordinate in the dungeon
     * @param idx index of the DungeonNode from the flattened map
     * @returns true if idx matches player player
     */
    const hasPlayer = (idx: number) => {
        //converting 1D idx to 2D idx
        const row = Math.floor(idx / dungeon.rows)
        const col = idx % dungeon.cols

        //check if coordinates match
        return (row === player[0] && col === player[1])
    }
    //Convert the Dungeon.map to html. 
    return (
        <React.Fragment>
            {/** tabindex required for key detection */}
            {(!complete.current)
                ?
                (<div tabIndex={0}
                    className="dungeon-map"
                    onKeyDown={e => handleKeyDown(e, dungeon)}
                    style={{
                        display: "grid",
                        gridTemplateColumns: `repeat(${dungeon.cols}, auto)`,
                        gridTemplateRows: `repeat(${dungeon.rows}, auto`,
                        aspectRatio: `${dungeon.cols / dungeon.rows}`
                    }}>
                    {dungeon.map
                        //flatten 2d array to 1d
                        .flat()
                        //create DungeonNode components for every internal dungeon node
                        .map((node, idx) =>
                            <DungeonNodeDisplay node={node} key={idx} hasPlayer={hasPlayer(idx)} />)}
                </div>)
                : (
                    <div className="victory">
                        <h1> YOU WIN! CONGRATULATIONS</h1>
                        <p> Current Gold: {playerData.gold} </p>
                        <Link to="/dungeon-select" children={<CDButton> Level Select</CDButton>} />
                        <Link to="/python-dungeon" children={<CDButton> Script it! </CDButton>} />
                        <Link to="/hometown" children={<CDButton> Home </CDButton>} />
                    </div>)}
        </React.Fragment>
    )
}
export default DungeonMap